{"version":3,"sources":["reportWebVitals.ts","theme.ts","index.tsx","App.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createMuiTheme","palette","primary","main","secondary","background","default","typography","fontFamily","join","fontSize","h1","h2","h3","h4","h5","h6","ReactDOM","render","ThemeProvider","CssBaseline","App","document","getElementById","Dropper","files","setFiles","useState","bitmap","setBitmap","file","arrayBuffer","x","bmp","decode","Buffer","from","isDropped","useMemo","length","style","display","fileObjects","onAdd","JSON","stringify","buffer","data","variant"],"mappings":"0JAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,0BC8BCQ,EApCDC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,WAERE,WAAY,CACVC,QAAS,YAGbC,WAAY,CACVC,WAAY,CAAC,cAAcC,KAAK,KAChCC,SAAU,GACVC,GAAI,CACFD,SAAU,WAEZE,GAAI,CACFF,SAAU,UAEZG,GAAI,CACFH,SAAU,WAEZI,GAAI,CACFJ,SAAU,YAEZK,GAAI,CACFL,SAAU,QAEZM,GAAI,CACFN,SAAU,W,QC5BhBO,IAASC,OACP,eAACC,EAAA,EAAD,CAAepB,MAAOA,EAAtB,UACE,cAACqB,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,OAEFC,SAASC,eAAe,SAM1BjC,K,8ICZMkC,EAGD,SAAC,GAAyB,IAAD,EAAtBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACb,EAA4BC,mBAAgC,MAA5D,mBAAOC,EAAP,KAAeC,EAAf,KACK,OAALJ,QAAK,IAALA,GAAA,UAAAA,EAAQ,UAAR,SAAYK,KAAKC,cAActC,MAAK,SAACuC,GACnCH,EAAUI,IAAIC,OAAOC,EAAOC,KAAKJ,QAEnC,IAAMK,EAAYC,mBAAQ,kBAAuB,IAAjBb,EAAMc,SAAc,CAACd,IACrD,OACE,eAAC,IAAD,WACE,qBAAKe,MAAOH,EAAY,CAAEI,QAAS,QAAW,GAA9C,SACE,cAAC,IAAD,CAAkBC,YAAajB,EAAOkB,MAAOjB,MAE/C,qBAAKc,MAAQH,EAAkC,GAAtB,CAAEI,QAAS,QAApC,SACE,8BACc,OAAXb,EACG,aACAgB,KAAKC,UACF,WACC,MAAkCjB,EAAlC,EAAQkB,OAAR,EAAgBC,KAChB,OADA,iBADD,GAID,KACA,WAQD,eACb,MAA0BpB,mBAAuB,IAAjD,mBAAOF,EAAP,KAAcC,EAAd,KACA,OACE,cAAC,WAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAYsB,QAAQ,KAApB,oDACA,cAACxB,EAAD,CAASC,MAAOA,EAAOC,SAAUA,Y","file":"static/js/main.0026389f.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\n// サイトのベースとなる独自のテーマを作成する\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#1976d2\", //サイト内で使える任意のprimary color\n    },\n    secondary: {\n      main: \"#dc004e\", //サイト内で使える任意のsecondary color\n    },\n    background: {\n      default: \"#fffafa\", // 背景色を設定出来る。何も設定しなければ白\n    },\n  },\n  typography: {\n    fontFamily: [\"sans-serif\"].join(\",\"),\n    fontSize: 12,\n    h1: {\n      fontSize: \"1.75rem\",\n    },\n    h2: {\n      fontSize: \"1.5rem\",\n    },\n    h3: {\n      fontSize: \"1.25rem\",\n    },\n    h4: {\n      fontSize: \"1.125rem\",\n    },\n    h5: {\n      fontSize: \"1rem\",\n    },\n    h6: {\n      fontSize: \"1rem\",\n    },\n  },\n});\n\nexport default theme;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ThemeProvider, CssBaseline } from \"@material-ui/core\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Container, Typography } from \"@material-ui/core\";\nimport { DropzoneAreaBase, FileObject } from \"material-ui-dropzone\";\nimport { FC, useState, useMemo, Fragment } from \"react\";\nimport bmp from \"bmp-js\";\n\nconst Dropper: FC<{\n  files: FileObject[];\n  setFiles: (fileObject: FileObject[]) => void;\n}> = ({ files, setFiles }) => {\n  const [bitmap, setBitmap] = useState<bmp.BmpDecoder | null>(null);\n  files?.[0]?.file.arrayBuffer().then((x: ArrayBuffer) => {\n    setBitmap(bmp.decode(Buffer.from(x)));\n  });\n  const isDropped = useMemo(() => files.length !== 0, [files]);\n  return (\n    <Container>\n      <div style={isDropped ? { display: \"none\" } : {}}>\n        <DropzoneAreaBase fileObjects={files} onAdd={setFiles} />\n      </div>\n      <div style={!isDropped ? { display: \"none\" } : {}}>\n        <pre>\n          {bitmap === null\n            ? \"Loading...\"\n            : JSON.stringify(\n                (() => {\n                  const { buffer, data, ...rest } = bitmap as any;\n                  return rest;\n                })(),\n                null,\n                2\n              )}\n        </pre>\n      </div>\n    </Container>\n  );\n};\n\nexport default () => {\n  const [files, setFiles] = useState<FileObject[]>([]);\n  return (\n    <Fragment>\n      <Container>\n        <Typography variant=\"h1\">BMP ファイルを D&D</Typography>\n        <Dropper files={files} setFiles={setFiles} />\n      </Container>\n    </Fragment>\n  );\n};\n"],"sourceRoot":""}